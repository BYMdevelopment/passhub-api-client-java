/*
 * PassHub API
 * PassHub API documentation
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bymdev.voucherhub.api;

import com.bymdev.voucherhub.ApiCallback;
import com.bymdev.voucherhub.ApiClient;
import com.bymdev.voucherhub.ApiException;
import com.bymdev.voucherhub.ApiResponse;
import com.bymdev.voucherhub.Configuration;
import com.bymdev.voucherhub.Pair;
import com.bymdev.voucherhub.ProgressRequestBody;
import com.bymdev.voucherhub.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.bymdev.voucherhub.model.ProductDTO;

import java.lang.reflect.Type;

public class ProductResourceApi {
    private ApiClient apiClient;

    public ProductResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductResourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for findProductsByVendor
     * @param vendorId the internal vendor id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findProductsByVendorCall(Long vendorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products/vendor/{vendorId}"
            .replaceAll("\\{" + "vendorId" + "\\}", apiClient.escapeString(vendorId.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Api-Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findProductsByVendorValidateBeforeCall(Long vendorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling findProductsByVendor(Async)");
        }
        

        com.squareup.okhttp.Call call = findProductsByVendorCall(vendorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * findProductsByVendor
     * Required permissions: CAN_GET_PRODUCTS_BY_VENDOR
     * @param vendorId the internal vendor id (required)
     * @return java.util.List&lt;ProductDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public java.util.List<ProductDTO> findProductsByVendor(Long vendorId) throws ApiException {
        ApiResponse<java.util.List<ProductDTO>> resp = findProductsByVendorWithHttpInfo(vendorId);
        return resp.getData();
    }

    /**
     * findProductsByVendor
     * Required permissions: CAN_GET_PRODUCTS_BY_VENDOR
     * @param vendorId the internal vendor id (required)
     * @return ApiResponse&lt;java.util.List&lt;ProductDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<java.util.List<ProductDTO>> findProductsByVendorWithHttpInfo(Long vendorId) throws ApiException {
        com.squareup.okhttp.Call call = findProductsByVendorValidateBeforeCall(vendorId, null, null);
        Type localVarReturnType = new TypeToken<java.util.List<ProductDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * findProductsByVendor (asynchronously)
     * Required permissions: CAN_GET_PRODUCTS_BY_VENDOR
     * @param vendorId the internal vendor id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findProductsByVendorAsync(Long vendorId, final ApiCallback<java.util.List<ProductDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findProductsByVendorValidateBeforeCall(vendorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<java.util.List<ProductDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllProducts
     * @param query query text (optional)
     * @param size quantity of listed records on page (optional)
     * @param page listing starts from page value (optional)
     * @param sortBy sort by (optional)
     * @param sortOrder sort order (optional)
     * @param type product type (optional)
     * @param tagFilter tagFilter (optional)
     * @param tagFilterMode tagFilterMode (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllProductsCall(String query, Integer size, Integer page, String sortBy, String sortOrder, String type, java.util.List<String> tagFilter, String tagFilterMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/products";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (tagFilter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "tagFilter", tagFilter));
        if (tagFilterMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tagFilterMode", tagFilterMode));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Api-Key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllProductsValidateBeforeCall(String query, Integer size, Integer page, String sortBy, String sortOrder, String type, java.util.List<String> tagFilter, String tagFilterMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllProductsCall(query, size, page, sortBy, sortOrder, type, tagFilter, tagFilterMode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getAllProducts
     * Required permissions: CAN_GET_PRODUCTS
     * @param query query text (optional)
     * @param size quantity of listed records on page (optional)
     * @param page listing starts from page value (optional)
     * @param sortBy sort by (optional)
     * @param sortOrder sort order (optional)
     * @param type product type (optional)
     * @param tagFilter tagFilter (optional)
     * @param tagFilterMode tagFilterMode (optional)
     * @return java.util.List&lt;ProductDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public java.util.List<ProductDTO> getAllProducts(String query, Integer size, Integer page, String sortBy, String sortOrder, String type, java.util.List<String> tagFilter, String tagFilterMode) throws ApiException {
        ApiResponse<java.util.List<ProductDTO>> resp = getAllProductsWithHttpInfo(query, size, page, sortBy, sortOrder, type, tagFilter, tagFilterMode);
        return resp.getData();
    }

    /**
     * getAllProducts
     * Required permissions: CAN_GET_PRODUCTS
     * @param query query text (optional)
     * @param size quantity of listed records on page (optional)
     * @param page listing starts from page value (optional)
     * @param sortBy sort by (optional)
     * @param sortOrder sort order (optional)
     * @param type product type (optional)
     * @param tagFilter tagFilter (optional)
     * @param tagFilterMode tagFilterMode (optional)
     * @return ApiResponse&lt;java.util.List&lt;ProductDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<java.util.List<ProductDTO>> getAllProductsWithHttpInfo(String query, Integer size, Integer page, String sortBy, String sortOrder, String type, java.util.List<String> tagFilter, String tagFilterMode) throws ApiException {
        com.squareup.okhttp.Call call = getAllProductsValidateBeforeCall(query, size, page, sortBy, sortOrder, type, tagFilter, tagFilterMode, null, null);
        Type localVarReturnType = new TypeToken<java.util.List<ProductDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllProducts (asynchronously)
     * Required permissions: CAN_GET_PRODUCTS
     * @param query query text (optional)
     * @param size quantity of listed records on page (optional)
     * @param page listing starts from page value (optional)
     * @param sortBy sort by (optional)
     * @param sortOrder sort order (optional)
     * @param type product type (optional)
     * @param tagFilter tagFilter (optional)
     * @param tagFilterMode tagFilterMode (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllProductsAsync(String query, Integer size, Integer page, String sortBy, String sortOrder, String type, java.util.List<String> tagFilter, String tagFilterMode, final ApiCallback<java.util.List<ProductDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllProductsValidateBeforeCall(query, size, page, sortBy, sortOrder, type, tagFilter, tagFilterMode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<java.util.List<ProductDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
