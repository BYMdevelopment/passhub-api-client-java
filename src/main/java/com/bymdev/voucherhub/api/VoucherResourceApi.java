/*
 * PassHub API
 * PassHub API documentation
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bymdev.voucherhub.api;

import com.bymdev.voucherhub.ApiCallback;
import com.bymdev.voucherhub.ApiClient;
import com.bymdev.voucherhub.ApiException;
import com.bymdev.voucherhub.ApiResponse;
import com.bymdev.voucherhub.Configuration;
import com.bymdev.voucherhub.Pair;
import com.bymdev.voucherhub.ProgressRequestBody;
import com.bymdev.voucherhub.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.bymdev.voucherhub.model.ExtraValidationParamDTO;
import com.bymdev.voucherhub.model.GenericStatusDTO;
import com.bymdev.voucherhub.model.JSONObject;
import com.bymdev.voucherhub.model.OrderNoteParamDTO;
import com.bymdev.voucherhub.model.ValidationResult;

import java.lang.reflect.Type;

public class VoucherResourceApi {
    private ApiClient apiClient;

    public VoucherResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VoucherResourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelValidation
     * @param transactionTag the transaction tag of validation (required)
     * @param reason the reason of validation (optional)
     * @param note the validation note dto (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelValidationCall(String transactionTag, String reason, OrderNoteParamDTO note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = note;

        // create path and map variables
        String localVarPath = "/api/v2/voucher/validate/cancel";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (transactionTag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transactionTag", transactionTag));
        if (reason != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reason", reason));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Api-Key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelValidationValidateBeforeCall(String transactionTag, String reason, OrderNoteParamDTO note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transactionTag' is set
        if (transactionTag == null) {
            throw new ApiException("Missing the required parameter 'transactionTag' when calling cancelValidation(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelValidationCall(transactionTag, reason, note, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [V2] Cancel validation for the voucher
     * Required permissions: CAN_CANCEL_VALIDATION
     * @param transactionTag the transaction tag of validation (required)
     * @param reason the reason of validation (optional)
     * @param note the validation note dto (optional)
     * @return GenericStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GenericStatusDTO cancelValidation(String transactionTag, String reason, OrderNoteParamDTO note) throws ApiException {
        ApiResponse<GenericStatusDTO> resp = cancelValidationWithHttpInfo(transactionTag, reason, note);
        return resp.getData();
    }

    /**
     * [V2] Cancel validation for the voucher
     * Required permissions: CAN_CANCEL_VALIDATION
     * @param transactionTag the transaction tag of validation (required)
     * @param reason the reason of validation (optional)
     * @param note the validation note dto (optional)
     * @return ApiResponse&lt;GenericStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GenericStatusDTO> cancelValidationWithHttpInfo(String transactionTag, String reason, OrderNoteParamDTO note) throws ApiException {
        com.squareup.okhttp.Call call = cancelValidationValidateBeforeCall(transactionTag, reason, note, null, null);
        Type localVarReturnType = new TypeToken<GenericStatusDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [V2] Cancel validation for the voucher (asynchronously)
     * Required permissions: CAN_CANCEL_VALIDATION
     * @param transactionTag the transaction tag of validation (required)
     * @param reason the reason of validation (optional)
     * @param note the validation note dto (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelValidationAsync(String transactionTag, String reason, OrderNoteParamDTO note, final ApiCallback<GenericStatusDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelValidationValidateBeforeCall(transactionTag, reason, note, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GenericStatusDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelVoucher
     * @param orderId the internal id of order (required)
     * @param voucherId the voucher id (optional)
     * @param note the voucher note dto (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelVoucherCall(Long orderId, String voucherId, OrderNoteParamDTO note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = note;

        // create path and map variables
        String localVarPath = "/api/v1/voucher/cancel";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderId", orderId));
        if (voucherId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucherId", voucherId));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Api-Key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelVoucherValidateBeforeCall(Long orderId, String voucherId, OrderNoteParamDTO note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelVoucher(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelVoucherCall(orderId, voucherId, note, progressListener, progressRequestListener);
        return call;

    }

    /**
     * cancelVoucher
     * Required permissions: CAN_CANCEL_ORDER
     * @param orderId the internal id of order (required)
     * @param voucherId the voucher id (optional)
     * @param note the voucher note dto (optional)
     * @return GenericStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GenericStatusDTO cancelVoucher(Long orderId, String voucherId, OrderNoteParamDTO note) throws ApiException {
        ApiResponse<GenericStatusDTO> resp = cancelVoucherWithHttpInfo(orderId, voucherId, note);
        return resp.getData();
    }

    /**
     * cancelVoucher
     * Required permissions: CAN_CANCEL_ORDER
     * @param orderId the internal id of order (required)
     * @param voucherId the voucher id (optional)
     * @param note the voucher note dto (optional)
     * @return ApiResponse&lt;GenericStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GenericStatusDTO> cancelVoucherWithHttpInfo(Long orderId, String voucherId, OrderNoteParamDTO note) throws ApiException {
        com.squareup.okhttp.Call call = cancelVoucherValidateBeforeCall(orderId, voucherId, note, null, null);
        Type localVarReturnType = new TypeToken<GenericStatusDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * cancelVoucher (asynchronously)
     * Required permissions: CAN_CANCEL_ORDER
     * @param orderId the internal id of order (required)
     * @param voucherId the voucher id (optional)
     * @param note the voucher note dto (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelVoucherAsync(Long orderId, String voucherId, OrderNoteParamDTO note, final ApiCallback<GenericStatusDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelVoucherValidateBeforeCall(orderId, voucherId, note, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GenericStatusDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertVoucher
     * @param oldVoucherId the old voucher id (required)
     * @param newVoucherId the new voucher id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertVoucherCall(String oldVoucherId, String newVoucherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/voucher/convert";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (oldVoucherId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("oldVoucherId", oldVoucherId));
        if (newVoucherId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newVoucherId", newVoucherId));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Api-Key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertVoucherValidateBeforeCall(String oldVoucherId, String newVoucherId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oldVoucherId' is set
        if (oldVoucherId == null) {
            throw new ApiException("Missing the required parameter 'oldVoucherId' when calling convertVoucher(Async)");
        }
        
        // verify the required parameter 'newVoucherId' is set
        if (newVoucherId == null) {
            throw new ApiException("Missing the required parameter 'newVoucherId' when calling convertVoucher(Async)");
        }
        

        com.squareup.okhttp.Call call = convertVoucherCall(oldVoucherId, newVoucherId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * convertVoucher
     * Required permissions: CAN_CONVERT_VOUCHER
     * @param oldVoucherId the old voucher id (required)
     * @param newVoucherId the new voucher id (required)
     * @return JSONObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JSONObject convertVoucher(String oldVoucherId, String newVoucherId) throws ApiException {
        ApiResponse<JSONObject> resp = convertVoucherWithHttpInfo(oldVoucherId, newVoucherId);
        return resp.getData();
    }

    /**
     * convertVoucher
     * Required permissions: CAN_CONVERT_VOUCHER
     * @param oldVoucherId the old voucher id (required)
     * @param newVoucherId the new voucher id (required)
     * @return ApiResponse&lt;JSONObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JSONObject> convertVoucherWithHttpInfo(String oldVoucherId, String newVoucherId) throws ApiException {
        com.squareup.okhttp.Call call = convertVoucherValidateBeforeCall(oldVoucherId, newVoucherId, null, null);
        Type localVarReturnType = new TypeToken<JSONObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * convertVoucher (asynchronously)
     * Required permissions: CAN_CONVERT_VOUCHER
     * @param oldVoucherId the old voucher id (required)
     * @param newVoucherId the new voucher id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertVoucherAsync(String oldVoucherId, String newVoucherId, final ApiCallback<JSONObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertVoucherValidateBeforeCall(oldVoucherId, newVoucherId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JSONObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateVoucher
     * @param validationId the voucher validation id (required)
     * @param vendorId the internal id of vendor (required)
     * @param productTag the product tag (optional)
     * @param orderItemIds the array of order item ids (optional)
     * @param skipExpiryCheck flag to skip expiry check within strategy (optional)
     * @param extraParamDTO the validation extra params dto (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateVoucherCall(String validationId, Long vendorId, String productTag, java.util.List<Long> orderItemIds, Boolean skipExpiryCheck, ExtraValidationParamDTO extraParamDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = extraParamDTO;

        // create path and map variables
        String localVarPath = "/api/v2/voucher/validate";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (validationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validationId", validationId));
        if (vendorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vendorId", vendorId));
        if (productTag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("productTag", productTag));
        if (orderItemIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "orderItemIds", orderItemIds));
        if (skipExpiryCheck != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skipExpiryCheck", skipExpiryCheck));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "X-Api-Key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateVoucherValidateBeforeCall(String validationId, Long vendorId, String productTag, java.util.List<Long> orderItemIds, Boolean skipExpiryCheck, ExtraValidationParamDTO extraParamDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'validationId' is set
        if (validationId == null) {
            throw new ApiException("Missing the required parameter 'validationId' when calling validateVoucher(Async)");
        }
        
        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling validateVoucher(Async)");
        }
        

        com.squareup.okhttp.Call call = validateVoucherCall(validationId, vendorId, productTag, orderItemIds, skipExpiryCheck, extraParamDTO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [V2] Validates voucher which represents single order item or group of them.
     * Required permissions: CAN_VALIDATE;
     * @param validationId the voucher validation id (required)
     * @param vendorId the internal id of vendor (required)
     * @param productTag the product tag (optional)
     * @param orderItemIds the array of order item ids (optional)
     * @param skipExpiryCheck flag to skip expiry check within strategy (optional)
     * @param extraParamDTO the validation extra params dto (optional)
     * @return ValidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResult validateVoucher(String validationId, Long vendorId, String productTag, java.util.List<Long> orderItemIds, Boolean skipExpiryCheck, ExtraValidationParamDTO extraParamDTO) throws ApiException {
        ApiResponse<ValidationResult> resp = validateVoucherWithHttpInfo(validationId, vendorId, productTag, orderItemIds, skipExpiryCheck, extraParamDTO);
        return resp.getData();
    }

    /**
     * [V2] Validates voucher which represents single order item or group of them.
     * Required permissions: CAN_VALIDATE;
     * @param validationId the voucher validation id (required)
     * @param vendorId the internal id of vendor (required)
     * @param productTag the product tag (optional)
     * @param orderItemIds the array of order item ids (optional)
     * @param skipExpiryCheck flag to skip expiry check within strategy (optional)
     * @param extraParamDTO the validation extra params dto (optional)
     * @return ApiResponse&lt;ValidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResult> validateVoucherWithHttpInfo(String validationId, Long vendorId, String productTag, java.util.List<Long> orderItemIds, Boolean skipExpiryCheck, ExtraValidationParamDTO extraParamDTO) throws ApiException {
        com.squareup.okhttp.Call call = validateVoucherValidateBeforeCall(validationId, vendorId, productTag, orderItemIds, skipExpiryCheck, extraParamDTO, null, null);
        Type localVarReturnType = new TypeToken<ValidationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [V2] Validates voucher which represents single order item or group of them. (asynchronously)
     * Required permissions: CAN_VALIDATE;
     * @param validationId the voucher validation id (required)
     * @param vendorId the internal id of vendor (required)
     * @param productTag the product tag (optional)
     * @param orderItemIds the array of order item ids (optional)
     * @param skipExpiryCheck flag to skip expiry check within strategy (optional)
     * @param extraParamDTO the validation extra params dto (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateVoucherAsync(String validationId, Long vendorId, String productTag, java.util.List<Long> orderItemIds, Boolean skipExpiryCheck, ExtraValidationParamDTO extraParamDTO, final ApiCallback<ValidationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateVoucherValidateBeforeCall(validationId, vendorId, productTag, orderItemIds, skipExpiryCheck, extraParamDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
